● - What is `NPM`?
npm is the world's largest Software Library (Registry).npm is also a software Package Manager and Installer
● - What is `Parcel/Webpack`? Why do we need it?
webpack/parcel are  module bundlers for modern JavaScript applications. When webpack/parcel processes your application, it internally builds a dependency graph from one or more entry points and then combines every module your project needs into one or more bundles, which are static assets to serve your content from.
Webpack goes through your package and creates what it calls a dependency graph which consists of various modules which your webapp would require to function as expected. Then, depending on this graph, it creates a new package which consists of the very bare minimum number of files required, often just a single bundle.js file which can be plugged in to the html file easily and used for the application.
● - What is `.parcel-cache`?
.parcel-cache is file which is auto generated by parcel during building of the application. it is used by the watcher algorithm for subsequent chnages. So that hot module replacement take place and build time minimised for subsequent builds.
● - What is `npx` ?
Node Package Execute Run packages without downloading using npx.
● - What is difference between `dependencies` vs `devDependencies`?
devDependencies is the dependencies which are only be used for development environment.

dependencies dependencies contains those packages information which are used for development as well as for production.
● - What is Tree Shaking?
Removal of dead, unused and unwanted code is known as Tree Shaking. it removes the unused code from the packages installed and produces the only useful production code.
● - What is Hot Module Replacement?
When you make a change, Parcel automatically updates your code in the browser – no page reload necessary! It uses file watcher algorithm (C++) and track the changes and also maintain .parcel-cache. and Hot Reload.
● - List down your favorite 5 superpowers of Parcel and describe any 3 of them in your
own words.

    HMR - HOT Module Replacement
    Bundling
    Minifying & Cleaning the code
    Manage dev and production builds
    Tree Shaking
    Manage Port Number
    Consistent Hashing algorithm
    Proved http and https in dev
    Image & media file optimization(compression)

● - What is `.gitignore`? What should we add and not add into it?
Gitignore is a file which is used to ignore the files that we need to push to the remote repositories and server.If we mention the file names in the gitignore file then those files will be excluded while pushing code to the repo. we should add node modules,.parcel-cache and dist folder names to it because it is very large in size and it could be generated by the server when our app is deployed in it. we should not add the files that we created and modified in gitignore we just need to put the auto generated files to gitignore.
● - What is the difference between `package.json` and `package-lock.json`?
package.json is a file that is used to define the dependencies and scripts for a project along with the configs. It is usually located at the root of the project, and it contains information about the project, such as the name, version, and description, and a list of dependencies and scripts that are used by the project.
package-lock.json, on the other hand, is a file that is used to lock the dependencies of a project to specific versions. It is automatically generated by NPM based on the dependencies that are installed in the project, and it includes detailed information about each dependency, including the version and the exact location of the package, and its dependencies as well.

It includes detailed information about each dependency, including the version number and the exact location of the package. This information is used by the package manager to ensure that the same versions of the dependencies are installed on every machine that uses the project. This avoids the famous Works on my Machine problem.
● - Why should I not modify `package-lock.json`?
This is because the file is generated by the npm every time you run the build script using the 'npm'. The changes we make to it, will be overridden by the npm commands. Also, if you do modify the file, you will introduce unnecessary errors into your project, the manual primming of the nodes and their dependencies is almost always bound to errors, hence we use 'npm' to make any changes, such as updating or installing a package.
● - What is `node_modules` ? Is it a good idea to push that on git?
Node modules contain the transitive dependencies of the project. it is not a good idea to push them to git because it is in larger size
● - What is the `dist` folder?
The /dist folder contains the minimized version of the source code. The code present in the /dist folder is actually the code which is used on production web applications. Along with the minified code, the /dist folder also comprises of all the compiled modules that may or may not be used with other systems.
● - What is `browserlists`
Browserslist is a tool that allows specifying which browsers should be supported in your frontend app by specifying "queries" in a config file. It's used by frameworks/libraries such as React, Angular and Vue, but it's not limited to them.
