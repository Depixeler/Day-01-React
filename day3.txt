1.What is JSX?
JSX stands for JavaScript XML.JSX allows us to write HTML in React.JSX makes it easier to write and add HTML in React.
2.Super POwers    of JSX:
JSX has many superpowers that make it a useful tool for building user interfaces:

    Expressions: JSX allows you to write HTML-like code in your JavaScript, which can make it easier to understand and write UI code. This is instead of the verbose React.createElement.

    Performance: JSX is compiled by Babel to native JavaScript code, so it is as fast as writing raw JavaScript.

    Integration with React: JSX is often used with the React library, and it is designed to work with React. You can use JSX to manipulate the structure of a React component using just JavaScript, and React will efficiently update the DOM to match the structure of the JSX element without issues.

    Reusable components: You can use JSX to define reusable components that can be rendered in multiple places in your application. This can make it easier to build and maintain large applications.

But JSX has a few syntax rules that you need to follow, such as using camelCase for HTML attributes and specifying the class attribute as className. So, once you get used to these rules, JSX is very powerful.

3. Role of type attribute in script tag? What options can I use there?
The type attribute specifies the type of the script. The type attribute identifies the content between the <script> and </script> tags. It has a Default value which is “text/javascript”.
type attribute can be of the following types:

    text/javascript : It is the basic standard of writing javascript code inside the <script> tag.

    Syntax

    <script type="text/javascript"></script>

    text/ecmascript : this value indicates that the script is following the EcmaScript standards.
    module: This value tells the browser that the script is a module that can import or export other files or modules inside it.
    text/babel : This value indicates that the script is a babel type and required bable to transpile it.
    text/typescript: As the name suggest the script is written in TypeScript.
4. {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX.

 The Difference is stated below:

    {TitleComponent}: This value describes the TitleComponent as a javascript expression or a variable. The {} can embed a javascript expression or a variable inside it.
    <TitleComponent/> : This value represents a Component that is basically returning Some JSX value. In simple terms TitleComponent a function that is returning a JSX value. A component is written inside the {<  />} expression.
    <TitleComponent></TitleComponent> : <TitleComponent /> and <TitleComponent></TitleComponent> are equivalent only when < TitleComponent /> has no child components. The opening and closing tags are created to include the child components.

Example

<TitleComponent>
    <FirstChildComponent />
    <SecondChildComponent />
    <ThirdChildComponent />
</TitleComponent>
